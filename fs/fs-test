#!/bin/bash
########################################################################
##
## Copyright 2015 PMC-Sierra, Inc.
##
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License. You may
## obtain a copy of the License at
## http://www.apache.org/licenses/LICENSE-2.0 Unless required by
## applicable law or agreed to in writing, software distributed under the
## License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
## CONDITIONS OF ANY KIND, either express or implied. See the License for
## the specific language governing permissions and limitations under the
## License.
##
########################################################################

########################################################################
##
##   Description:
##     A simple shell script to do some fun filesystem testing.
##
########################################################################

set -e

  # Parameters for running the test
FORMAT=FALSE
RUN_DD=TRUE
RUN_FIO=TRUE

DEVICE=/dev/nvme0n1
FS=ext4
MNT=/mnt/${FS}
FILENAME=${MNT}/tst
FIOEXE=fio
COUNT=1k
SIZE=100
FSYNC=100

set +e; rm *.out; set -e
DATESTR=$(date +%S%M%H%d%m%y)

  # Accept some key parameter changes from the command line.
while getopts "x:d:f:F:s:c:y:tz" opt; do
    case "$opt" in
	x)  FIOEXE=${OPTARG}
            ;;
	d)  DEVICE=${OPTARG}
            ;;
	f)  FILENAME=${OPTARG}
            ;;
	F)  FSYNC=${OPTARG}
            ;;
	s)  SIZE=${OPTARG}
	    ;;
	c)  COUNT=${OPTARG}
            ;;
	y)  FS=${OPTARG}
            ;;
	t)  FORMAT=TRUE
            ;;
	z)  RUN_DD=FUN_FIO=FALSE
            ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    exit 1
	    ;;
    esac
done

set +e ; umount $DEVICE ; set -e
if [ "$FORMAT" = TRUE ]; then
    echo "Formatting..."
    mkfs.$FS $DEVICE
fi

  # N.B The odd -o call for blktrace is to accomodate when blktrace is
  # run inside a VM.

mount -t $FS $DEVICE $MNT
if [ "$RUN_DD" = TRUE ]; then
    echo "Running dd..."
    blktrace -d $DEVICE -o - > blktrace.${FS}.dd &
    BLKTRACE_PID=$!
    dd if=/dev/zero of=$FILENAME bs=4k count=${COUNT}
    sync; kill -15 $BLKTRACE_PID
    hdparm --fibmap $FILENAME > fibmap.${FS}.dd
fi

sleep 1

if [ "$RUN_FIO" = TRUE ]; then
    echo "Running fio..."
    blktrace -d $DEVICE -o - > blktrace.${FS}.fio &
    BLKTRACE_PID=$!
    $FIOEXE --name=fs-test --filename $FILENAME --rw=randwrite \
	    --size=$SIZE --iodepth=1 --ioengine=sync --numjobs=1 --fsync=$FSYNC
    sync; kill -15 $BLKTRACE_PID
    hdparm --fibmap $FILENAME > fibmap.${FS}.fio
fi

  # Run the post-processing...

if [ "$RUN_DD" = TRUE ]; then
    ./fs-test.py -f fibmap.${FS}.dd -b blktrace.${FS}.dd
fi
if [ "$RUN_FIO" = TRUE ]; then
    ./fs-test.py -f fibmap.${FS}.fio -b blktrace.${FS}.fio
fi

  # Tar up the output .out files and timestamp them

tar cvzf fs-test.${FS}.${DATESTR}.tar.bz2 *.out
